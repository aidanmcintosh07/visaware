// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Social media connections
  socialAccounts SocialAccount[]

  // Analysis results
  analyses Analysis[]

  @@map("users")
}

model SocialAccount {
  id          String    @id @default(cuid())
  userId      String
  platform    String // 'instagram', 'twitter', 'facebook'
  username    String
  isConnected Boolean   @default(true)
  lastScraped DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Scraped content
  content ScrapedContent[]

  @@unique([userId, platform])
  @@map("social_accounts")
}

model ScrapedContent {
  id              String   @id @default(cuid())
  socialAccountId String
  contentType     String // 'post', 'tweet', 'story'
  text            String
  imageUrl        String?
  originalUrl     String?
  metadata        String? // JSON string for additional data
  scrapedAt       DateTime @default(now())

  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  // Analysis results for this content
  analyses Analysis[]

  @@map("scraped_content")
}

model Analysis {
  id              String   @id @default(cuid())
  userId          String
  contentId       String
  riskLevel       String // 'low', 'medium', 'high', 'critical'
  riskScore       Int // 0-100
  categories      String // JSON array of risk categories
  explanation     String
  recommendations String // JSON array of recommendations
  analyzedAt      DateTime @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content ScrapedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("analyses")
}
